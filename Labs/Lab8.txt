Introduction

//note that “int a = 0;” occurs only once throughout the loop execution
for(int a = 0; a < 10; a++) { //2n+1
      d = a + a;              //2
}

Estimating g(x) Given f(x)------------------------------------------------------------------


1) f(n) = n^5
2) f(t) = t^3
3) f(x) = x^2
4) f(w) = wlog(w)


Counting Operations to Produce Polynomials -----------------------------------------------------------
1)
public static boolean isEmpty() {
      return head == null; // 1
}

2)
public static void c(int n) {
  for(int a = 0; a < n; a++) { //2n+1
    System.out.println( a * a); //1
  }
  num_occurrences(n);
}

public static int num_occurrences(int n) {
// this is just for reference, you do not need to supply an f(x) for this here
 int count = 0; //1
 for(int i = 0; i < n; i++) { //2n+1
   for(int j = 0; j < n; j++) { //2n+1
     if( i == j ) continue; //1
     if(strings[i] == strings[j]) { // 3
       count++; //1
     }
   }
 }
 return count; //1
}


3)
public static boolean isPrime(int n) {
  if(n == 1) return false; // 2

  for(int i = 2; i <n; i++) { // 2n+1
    if( n % i == 0 ) { //2
      return false;
    }
  }
  return true;
}



Demonstrating | f(x) | < c | g(x) | for all n > k -----------------------------------------------------------

1)
f(x) = 1
g(x) = 1

|f(x)| < c*|g(x)| x > k
1 = c * 1 => c = 2

c = 2

k > 0

2)f(x) = (2n(1)+1) * (1+2n(2n(4)+1+1)+1)
f(x) = (2n + 1) * (2n(8n + 2) + 2)
f(x) = (2n + 1) * (16n^2 + 4n + 2)
f(x) = 32n^3 + 8n^2 + 4n + 16n^2 + 4n + 2

f(x) = 32n^3 + 24n^2 + 8n + 2
g(x) = n^3

|f(x)| < c*|g(x)| x > k
32n^3 + 24n^2 + 8n + 2 = c * n^3
32*n*n*n + 24*n*n + 8*n +2 = c*n*n*n
c = 32 + 24 + 8 + 2 +1

c = 67
k > 1

3)
f(x) = 2 + 2n(2)+1
f(x) = 2 + 4n +1
f(x) = 4n +3
g(x) = n

|f(x)| < c*|g(x)| x > k
4n + 3 < c*n
c = 4 + 3 +1
c = 7
k > 1